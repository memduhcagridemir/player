{% extends 'base.html.twig' %}

{% block title %}Listen | player{% endblock %}

{% block div_container %}
    <br/>
    <br/>
    <br/>
    <div class="container">
        <div class="row">
            <div class="col-md-3">
                <div class="list-group">
                    <a href="#" class="list-group-item list-group-item-action flex-column align-items-start active">
                        <div class="d-flex w-100 justify-content-between">
                            <h5 class="mb-1">List group item heading</h5>
                            <small>3 days ago</small>
                        </div>
                        <small>Donec id elit non mi porta.</small>
                    </a>
                    <a href="#" class="list-group-item list-group-item-action flex-column align-items-start">
                        <div class="d-flex w-100 justify-content-between">
                            <h5 class="mb-1">List group item heading</h5>
                            <small class="text-muted">3 days ago</small>
                        </div>
                        <small class="text-muted">Donec id elit non mi porta.</small>
                    </a>
                    <a href="#" class="list-group-item list-group-item-action flex-column align-items-start">
                        <div class="d-flex w-100 justify-content-between">
                            <h5 class="mb-1">List group item heading</h5>
                            <small class="text-muted">3 days ago</small>
                        </div>
                        <small class="text-muted">Donec id elit non mi porta.</small>
                    </a>
                </div>
            </div>
            <div class="col-md-9">
                <div class="row">
                    <table class="table table-hover">
                        <thead>
                        <tr class="d-flex">
                            <th class="col-1">#</th>
                            <th class="col-8">File Name</th>
                            <th class="col-2">Length</th>
                            <th class="col-1">Play</th>
                        </tr>
                        </thead>
                        <tbody>
                        <tr class="d-flex">
                            <td class="col-1">1</td>
                            <td class="col-8">Otto</td>
                            <td class="col-2">@mdo</td>
                            <td class="col-1"><span class="oi oi-media-play"></span></td>
                        </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block footer %}
    <footer class="footer">
        <div class="container">
            <div class="row">
                <div class="col-12">
                    <div class="progress" id="progress">
                        <div class="progress-bar" role="progressbar" style="width: 30%; height: 2px;"></div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-8">
                    <div id="title">
                        <p>
                            <span id="track"></span> (<span id="timer">0:00</span> / <span id="duration">0:00</span>)
                        </p>
                    </div>
                </div>
                <div class="col-4">
                    <div class="controlsOuter">
                        <div class="controlsInner">
                            <div id="volume" class="fadeout">
                                <div id="barFull" class="bar"></div>
                                <div id="barEmpty" class="bar"></div>
                                <div id="sliderBtn"></div>
                            </div>

                            <div class="btn" id="shuffleBtn"><span class="oi oi-random"></span></div>
                            <div class="btn" id="prevBtn"><span class="oi oi-media-step-backward"></span></div>
                            <div class="btn" id="playBtn"><span class="oi oi-media-play"></span></div>
                            <div class="btn" id="pauseBtn"><span class="oi oi-media-pause"></span></div>
                            <div class="btn" id="nextBtn"><span class="oi oi-media-step-forward"></span></div>
                            <div class="btn" id="repeatBtn"><span class="oi oi-reload"></span></div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </footer>

    <style>
        html {
            position: relative;
            min-height: 100%;
        }
        body {
            /* Margin bottom by footer height */
            margin-bottom: 76px;
        }
        .footer {
            position: absolute;
            bottom: 0;
            width: 100%;
            height: 76px;
            line-height: 60px; /* Vertically center the text there */
            background-color: #f5f5f5;
        }

    </style>
{% endblock %}

{% block extrascripts %}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/howler/2.0.4/howler.core.min.js" integrity="sha256-X01rV9/R1vbHm3CxMRt6AFMe0Ea9wnpAGsurU3QkZU4=" crossorigin="anonymous"></script>

    <script type="text/javascript">
        $(document).ready(function(){
            var elms = ['track', 'timer', 'duration', 'playBtn', 'pauseBtn', 'prevBtn', 'nextBtn',
                'volumeBtn', 'progress', 'list', 'volume', 'barEmpty', 'barFull', 'sliderBtn'];
            elms.forEach(function(elm) {
                window[elm] = document.getElementById(elm);
            });

            var Player = function(playlist) {
                this.playlist = playlist;
                this.index = 0;

                track.innerHTML = playlist[0].title;
            };

            Player.prototype = {
                /**
                 * Play a song in the playlist.
                 * @param  {Number} index Index of the song in the playlist (leave empty to play the first or current).
                 */
                play: function(index) {
                    var self = this;
                    var sound;

                    index = typeof index === 'number' ? index : self.index;
                    var data = self.playlist[index];

                    // If we already loaded this track, use the current one.
                    // Otherwise, setup and load a new Howl.
                    if (data.howl) {
                        sound = data.howl;
                    } else {
                        sound = data.howl = new Howl({
                            src: [data.file],
                            html5: true,
                            onplay: function() {
                                // Display the duration.
                                duration.innerHTML = self.formatTime(Math.round(sound.duration()));

                                // Start upating the progress of the track.
                                requestAnimationFrame(self.step.bind(self));
                            },
                            onend: function() {
                                self.skip('right');
                            }
                        });
                    }

                    // Begin playing the sound.
                    sound.play();

                    // Update the track display.
                    track.innerHTML = data.title;

                    // Keep track of the index we are currently playing.
                    self.index = index;
                },

                /**
                 * Pause the currently playing track.
                 */
                pause: function() {
                    var self = this;

                    // Get the Howl we want to manipulate.
                    var sound = self.playlist[self.index].howl;

                    // Puase the sound.
                    sound.pause();

                    // Show the play button.
                    playBtn.style.display = 'block';
                    pauseBtn.style.display = 'none';
                },

                /**
                 * Skip to the next or previous track.
                 * @param  {String} direction 'next' or 'prev'.
                 */
                skip: function(direction) {
                    var self = this;

                    // Get the next track based on the direction of the track.
                    var index = 0;
                    if (direction === 'prev') {
                        index = self.index - 1;
                        if (index < 0) {
                            index = self.playlist.length - 1;
                        }
                    } else {
                        index = self.index + 1;
                        if (index >= self.playlist.length) {
                            index = 0;
                        }
                    }

                    self.skipTo(index);
                },

                /**
                 * Skip to a specific track based on its playlist index.
                 * @param  {Number} index Index in the playlist.
                 */
                skipTo: function(index) {
                    var self = this;

                    // Stop the current track.
                    if (self.playlist[self.index].howl) {
                        self.playlist[self.index].howl.stop();
                    }

                    // Reset progress.
                    progress.style.width = '0%';

                    // Play the new track.
                    self.play(index);
                },

                /**
                 * Set the volume and update the volume slider display.
                 * @param  {Number} val Volume between 0 and 1.
                 */
                volume: function(val) {
                    var self = this;

                    // Update the global volume (affecting all Howls).
                    Howler.volume(val);

                    // Update the display on the slider.
                    var barWidth = (val * 90) / 100;
                    barFull.style.width = (barWidth * 100) + '%';
                    sliderBtn.style.left = (window.innerWidth * barWidth + window.innerWidth * 0.05 - 25) + 'px';
                },

                /**
                 * Seek to a new position in the currently playing track.
                 * @param  {Number} per Percentage through the song to skip.
                 */
                seek: function(per) {
                    var self = this;

                    // Get the Howl we want to manipulate.
                    var sound = self.playlist[self.index].howl;

                    // Convert the percent into a seek position.
                    if (sound.playing()) {
                        sound.seek(sound.duration() * per);
                    }
                },

                /**
                 * The step called within requestAnimationFrame to update the playback position.
                 */
                step: function() {
                    var self = this;

                    // Get the Howl we want to manipulate.
                    var sound = self.playlist[self.index].howl;

                    // Determine our current seek position.
                    var seek = sound.seek() || 0;
                    timer.innerHTML = self.formatTime(Math.round(seek));
                    progress.style.width = (((seek / sound.duration()) * 100) || 0) + '%';

                    // If the sound is still playing, continue stepping.
                    if (sound.playing()) {
                        requestAnimationFrame(self.step.bind(self));
                    }
                },

                /**
                 * Toggle the volume display on/off.
                 */
                toggleVolume: function() {
                    var self = this;
                    var display = (volume.style.display === 'block') ? 'none' : 'block';

                    setTimeout(function() {
                        volume.style.display = display;
                    }, (display === 'block') ? 0 : 500);
                    volume.className = (display === 'block') ? 'fadein' : 'fadeout';
                },

                /**
                 * Format the time from seconds to M:SS.
                 * @param  {Number} secs Seconds to format.
                 * @return {String}      Formatted time.
                 */
                formatTime: function(secs) {
                    var minutes = Math.floor(secs / 60) || 0;
                    var seconds = (secs - minutes * 60) || 0;

                    return minutes + ':' + (seconds < 10 ? '0' : '') + seconds;
                }
            };

            var player = new Player([
                {
                    title: 'Oh Camper',
                    file: '/audio/camper.mp3',
                    howl: null
                },
                {
                    title: 'Rave Digger',
                    file: 'rave_digger',
                    howl: null
                },
                {
                    title: '80s Vibe',
                    file: '80s_vibe',
                    howl: null
                },
                {
                    title: 'Running Out',
                    file: 'running_out',
                    howl: null
                }
            ]);

            playBtn.addEventListener('click', function() {
                player.play();
            });
            pauseBtn.addEventListener('click', function() {
                player.pause();
            });
            prevBtn.addEventListener('click', function() {
                player.skip('prev');
            });
            nextBtn.addEventListener('click', function() {
                player.skip('next');
            });
            volumeBtn.addEventListener('click', function() {
                player.toggleVolume();
            });
            volume.addEventListener('click', function() {
                player.toggleVolume();
            });

            // Setup the event listeners to enable dragging of volume slider.
            barEmpty.addEventListener('click', function(event) {
                var per = event.layerX / parseFloat(barEmpty.scrollWidth);
                player.volume(per);
            });
            sliderBtn.addEventListener('mousedown', function() {
                window.sliderDown = true;
            });
            sliderBtn.addEventListener('touchstart', function() {
                window.sliderDown = true;
            });
            volume.addEventListener('mouseup', function() {
                window.sliderDown = false;
            });
            volume.addEventListener('touchend', function() {
                window.sliderDown = false;
            });

            var move = function(event) {
                if (window.sliderDown) {
                    var x = event.clientX || event.touches[0].clientX;
                    var startX = window.innerWidth * 0.05;
                    var layerX = x - startX;
                    var per = Math.min(1, Math.max(0, layerX / parseFloat(barEmpty.scrollWidth)));
                    player.volume(per);
                }
            };

            volume.addEventListener('mousemove', move);
            volume.addEventListener('touchmove', move);
        });
    </script>
{% endblock %}